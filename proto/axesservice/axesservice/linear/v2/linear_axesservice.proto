// MIT License
// 
// Copyright (c) 2021 Corvin Lasogga
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package axesservice.linear.v2;

option go_package = "coe-sops/proto/axesservice/linear/axesservice_linear_v2";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";



service HardwareController {
  // Get the current position of the linear axes stage
  rpc GetPosition (google.protobuf.Empty) returns (LinearPosition);
  // Get the position limits of the linear axes stage
  rpc GetPositionLimits (google.protobuf.Empty) returns (LinearPositionLimit);
  // Move to a target position and return the timestamp of completion
  rpc MoveToPosition (LinearMoveRequest) returns (LinearMoveResponse);
}

// Position of a linear axes stage
message LinearPosition {
  repeated double coordinates_in_mm = 1;
}

// Positional limits of a linear axes stage
message LinearPositionLimit {
  repeated LinearCoordinateLimit coordinate_limits = 1;
}

// Minimum and maximum positional limit of a coordinate [min, max]
message LinearCoordinateLimit {
  double min_coordinate_in_mm = 1;
  double max_coordinate_in_mm = 2;
}

// Move request of a linear axes stage
message LinearMoveRequest {
  LinearPosition target_position = 1;
}

// Move response of a linear axes stage
message LinearMoveResponse{
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}



service MoveWithScalarVelocityPlugin {
  // Get the scalar velocity limit of the linear axes stage
  rpc GetScalarVelocityLimit(google.protobuf.Empty) returns (LinearScalarVelocityLimit);
  // Move to a target position with a scalar velocity and return the timestamp of completion
  rpc MoveToPositionWithScalarVelocity (LinearMoveRequestWithScalarVelocity) returns (LinearMoveResponse);
}

// Minimum and maximum scalar velocity limit (min = 0, max]
message LinearScalarVelocityLimit {
  double min_velocity_in_mm_per_sec = 1;
  double max_velocity_in_mm_per_sec = 2;
}

// Move request of a linear axes stage with a scalar velocity
message LinearMoveRequestWithScalarVelocity {
  LinearPosition target_position = 1;
  LinearScalarVelocity scalar_velocity = 2;
}

// Scalar velocity
message LinearScalarVelocity {
  double velocity_in_mm_per_sec = 1;
}



service MoveWithVectorVelocityPlugin {
  // Get the vector velocity limit of the linear axes stage
  rpc GetVectorVelocityLimit(google.protobuf.Empty) returns (LinearVectorVelocityLimit);
  // Move to a target position with a vector velocity and return the timestamp of completion
  rpc MoveToPositionWithVectorVelocity (LinearMoveRequestWithVectorVelocity) returns (LinearMoveResponse);
}

// Vector velocity limits (min = 0, max]
message LinearVectorVelocityLimit {
  repeated LinearScalarVelocityLimit velocity_component_limits = 1;
}

// Move request of a linear axes stage with a vector velocity
message LinearMoveRequestWithVectorVelocity {
  LinearPosition target_position = 1;
  LinearVectorVelocity vector_velocity = 2;
}

// Vector velocity
message LinearVectorVelocity {
  repeated double velocity_in_mm_per_sec = 1;
}



service MoveWithScalarAccelerationPlugin {
  // Get the scalar acceleration limit of the linear axes stage
  rpc GetScalarAccelerationLimit(google.protobuf.Empty) returns (LinearScalarAccelerationLimit);
  // Move to a target position with a scalar velocity and acceleration and return the timestamp of completion
  rpc MoveToPositionWithScalarAcceleration (LinearMoveRequestWithScalarAcceleration) returns (LinearMoveResponse);
}

// Minimum and maximum scalar acceleration limit (min = 0, max]
message LinearScalarAccelerationLimit {
  double min_acceleration_in_mm_per_sec_square = 1;
  double max_acceleration_in_mm_per_sec_square = 2;
}

// Move request of a linear axes stage with a scalar velocity and acceleration
message LinearMoveRequestWithScalarAcceleration {
  LinearPosition target_position = 1;
  LinearScalarVelocity scalar_velocity = 2;
  LinearScalarAcceleration scalar_acceleration = 3;
}

// Scalar acceleration
message LinearScalarAcceleration {
  double acceleration_in_mm_per_sec_square = 1;
}



service MoveWithVectorAccelerationPlugin {
  // Get the vector acceleration limit of the linear axes stage
  rpc GetVectorAccelerationLimit(google.protobuf.Empty) returns (LinearVectorAccelerationLimit);
  // Move to a target position with a vector velocity and acceleration and return the timestamp of completion
  rpc MoveToPositionWithVectorAcceleration (LinearMoveRequestWithVectorAcceleration) returns (LinearMoveResponse);
}

// Velocity vector limits (min = 0, max]
message LinearVectorAccelerationLimit {
  repeated LinearScalarAccelerationLimit acceleration_component_limits = 1;
}

// Move request of a linear axes stage with a vector velocity and acceleration
message LinearMoveRequestWithVectorAcceleration {
  LinearPosition target_position = 1;
  LinearVectorVelocity vector_velocity = 2;
  LinearVectorAcceleration vector_acceleration = 3;
}

// Vector acceleration
message LinearVectorAcceleration {
  repeated double acceleration_in_mm_per_sec_square = 1;
}



service MoveWithTriggerPlugin {
  // Get the trigger step limit of the linear axes stage
  rpc GetTriggerStepLimit(google.protobuf.Empty) returns (LinearTriggerStepLimit);
  // Move to a target position with a scalar velocity and a trigger step and return the timestamp of completion
  rpc MoveToPositionWithTrigger (LinearMoveRequestWithTrigger) returns (LinearMoveResponse);
}

// Minimum and maximum trigger step limit
message LinearTriggerStepLimit {
  double min_step_size_in_mm = 1;
  double max_step_size_in_mm = 2;
}

// Move request of a linear axes stage with an axis ID, scalar velocity, scalar acceleration and a trigger step
message LinearMoveRequestWithTrigger {
  LinearAxisID axis_id = 1;
  LinearCoordinate target_coordinate = 2;
  LinearScalarVelocity scalar_velocity = 3;
  LinearScalarAcceleration scalar_acceleration = 4;
  LinearTriggerStep trigger_step = 5;
}

// Axis ID of a linear axes stage
message LinearAxisID {
  uint32 id = 1;
}

// Coordinate of a linear axes stage
message LinearCoordinate {
  double coordinate_in_mm = 1;
}

// Step size between two trigger signals of a linear axes stage
message LinearTriggerStep {
  double step_size_in_mm = 1;
}